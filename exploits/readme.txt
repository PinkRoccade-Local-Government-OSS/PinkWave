Exploits are categorised by vendor, for example: sword/

Inside the vendor directory will be a Python file for each exploit, for example sword/xsslogger.py
An exploit must throw an Exception with the superclass VDKException (import VDK.py) to log a vulnerability. 

Exploits must have 2 functions:
    options()
        Options returns a list of expected parameters, see also pinkwave.py --help
    start(pentest)
        Start executes when a pentest is running the exploit


Example of exploit (sword/cookiesecureflag.py):

import sys,time
from os.path import dirname
sys.path.append(dirname(dirname(dirname(__file__ ))))

# Importing helper functions/classes from PinkWave Framework
from VDK import vdkException
class VDK_SecureCookieFlagMissing(vdkException): pass

# Options returns a list required parameter, in this case only --target is required
def options():
    return ['target']

# From the start we can access the pentest.browser object and navigate to the specified pentest target
# Then we get and check cookies to see if they have a secure flag, if not log vulnerability (raise VDK_SecureCookieFlagMissing).
def start(pentest):
    pentest.browser.nav(pentest.target)
    if len(pentest.browser.cookies()) == 0:
        print "No cookies found"
    else:
        cookieNames = []
        for cookie in pentest.browser.cookies():
            if cookie.get("secure") is False:
                cookieNames.append(cookie.get("name"))

        if len(cookieNames) != 0:
            raise VDK_SecureCookieFlagMissing("secure flag missing for %s" % ",".join(cookieNames))
