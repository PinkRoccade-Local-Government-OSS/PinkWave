"""
Scans SSL port and tests if weak ciphers are enabled via NMAP
"""
__author__ = "Maarten Schermer"

import sys,os,time
from os.path import dirname,abspath
from datetime import datetime
import xml.etree.ElementTree as ET

# Importing PinkWave extensions
sys.path.append(dirname(dirname(dirname(abspath(__file__)))))
from extensions.Util import Util,report,payloads

# (Optional) Specify label list
def labels():
    return ['A6 - Sensitive Data Exposure']

def options():
    return ['target','ssl']

def start(pentest):

    host = Util.getHost(pentest.target)
    portNr = pentest.ssl
    reportRoot = Util.getReportDir(host)

    Util.createDir(reportRoot)
    Util.createDir(reportRoot + "/cipherscans")
    Util.createDir(reportRoot + "/cipherscans/" + pentest.ssl)

    reportRoot = reportRoot + "/cipherscans/" + pentest.ssl
    tmpReportRoot = reportRoot + "/cipherscans/" + pentest.ssl + "/tmp"
    Util.createDir(reportRoot)
    Util.createDir(tmpReportRoot)

    scriptFile = "/usr/share/nmap/scripts/ssl-enum-ciphers.nse"
    dstFile = reportRoot + "/" + "ciphers.csv"
    tmpFile = tmpReportRoot + "/" + "tmp-ciphers-" + pentest.ssl + ".xml"
    command = "nmap -p %s -T4 -v --script \"%s\" -oX \"%s\" %s" % (portNr,scriptFile,tmpFile,host)

    print Util.shell(command)
    pentest.browser.timeEnd = time.time()

    with open(tmpFile) as f:
        content = "".join(f.readlines())
        root = ET.fromstring(content)
        warnings = ""
        # Search for warnings
        elems = root.findall(".//*[@key='warnings']//elem")
        today = datetime.today()
        strtime = today.strftime('%Y-%m-%d %H:%M:%S')
        if len(elems) != 0:
            for elem in elems:
                elem = elem.text
                warnings += elem + ','

         # Search for cipher information
        csvLines = []
        query = "./host/ports/port/script//table"
        today = datetime.today()
        strtime = today.strftime('%Y-%m-%d %H:%M:%S')

        root = ET.fromstring(content)
        cipherData = {}
        r1 = root.findall(query)
        csvLines = []
        cipherDatas = []
        for r in r1:
            key = r.get("key")
            if key is not None and ("tls" in key.lower() or "ssl" in key.lower()):
                queryIn = ".//table//table//elem"
                xmlStr = ET.tostring(r)
                rootIn = ET.fromstring(xmlStr)
                r2 = rootIn.findall(queryIn)

                for ri in r2:
                    k = ri.get("key")
                    if k == "name":
                        cipherData['name'] = ri.text
                    if k == "kex_info":
                        cipherData['kex_info'] = ri.text
                    if k == "strength":
                        cipherData['strength'] = ri.text

                    if len(cipherData) == 3:
                        data = '"%s","%s","%s","%s","%s"' % (Util.escapeQuotes(strtime),Util.escapeQuotes(key),Util.escapeQuotes(cipherData['name']),Util.escapeQuotes(cipherData['kex_info']),Util.escapeQuotes(cipherData['strength']))
                        cipherData = {}
                        csvLines.append(data)

        print csvLines

    #print "Converting and extracting data from tmp file"

    with open(dstFile,"ab+") as f:
        f.write("\n")
        for line in csvLines:
            f.write(line + "\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
    #print "Excel file ready: %s..." % dstFile

    if len(warnings) != 0:
        report("ports: %s - %s" % (pentest.ssl,warnings))
