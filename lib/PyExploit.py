#!/usr/bin/python

"""
The PyExploit class can be used to load exploit scripts written in Python
"""
import sys,os
from os.path import dirname,abspath,isfile,isdir
import importlib

# Importing PinkWave extensions
sys.path.append(dirname(dirname(abspath(__file__))))
from extensions.Util import Util

class PyExploitException(Exception):pass

class PyExploit:

    def __init__(self, exploitPath):
        if not isfile(exploitPath):
            raise PyExploitException("Python exploit script not found in path: " + exploitPath)

        self.exploitPath = exploitPath
        self.options = []
        self.labels = [""]
        self.dependencies = {}

        mod = self.exploitPath.replace("/", ".").replace(".py", "")
        self.mod = importlib.import_module(mod)
        self.pentest = None

        if hasattr(self.mod, 'options'):
            self.options = self.mod.options()
        else:
            raise PyExploitException("Exploit missing options() function")

        if hasattr(self.mod, 'labels'):
            self.labels = self.mod.labels()

        if hasattr(self.mod, 'dependencies'):
            self.dependencies = self.mod.dependencies()
            self.verifyDependencies()

    def start(self,pentest):
        self.verifyOptions(pentest)
        self.pentest = pentest
        self.mod.start(pentest)

    def verifyDependencies(self):
        pw_modules = Util.getAppDir() + "/pw_modules"
        for key in self.dependencies.iterkeys():
            libpath = pw_modules + "/" + key
            if not isdir(libpath):
                raise Exception("External dependency %s missing, download here: %s and place it in %s" % (key,self.dependencies[key],libpath))

    def verifyOptions(self,pentest):
        for option in self.options:
            if getattr(pentest, option) is None:
                raise PyExploitException("Exploit parameter(s) missing: %s" % option)
