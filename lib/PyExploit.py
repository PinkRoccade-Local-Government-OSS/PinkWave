#!/usr/bin/python

"""
The PyExploit class can be used to load exploit scripts written in Python
"""
from os.path import isfile
import importlib
from time import sleep

class PyExploitException(Exception):pass

class PyExploit:

    def __init__(self, exploitPath):
        if not isfile(exploitPath):
            raise PyExploitException("Python exploit script not found in path: " + exploitPath)

        self.exploitPath = exploitPath
        self.labels = [""]
        mod = self.exploitPath.replace("/", ".").replace(".py", "")
        self.mod = importlib.import_module(mod)
        self.pentest = None

    def start(self,pentest):
        self.verifyOptions(pentest)
        if self.hasLabels():
            self.labels = self.mod.labels()

        self.pentest = pentest
        self.mod.start(pentest)

    def options(self):
        return self.mod.options()

    def labels(self):
        return self.mod.labels()

    def hasLabels(self):
        return hasattr(self.mod, 'labels')

    def hasOptions(self):
        return hasattr(self.mod, 'options')

    def verifyOptions(self,pentest):
        if self.hasOptions():
            options = self.mod.options()
            for option in options:
                if getattr(pentest, option) is None:
                    raise PyExploitException("Exploit parameter(s) missing: %s" % option)
            return True
        else: raise PyExploitException("Exploit missing options() function")

if __name__ == '__main__':
    from unittest import TestCase
    from unittest import main
    from Pentest import Pentest
    from Browser import Browser
    from ShellParse import ShellParse

    class testCalc(TestCase):

        def test_options_with_toless_parameters(self):

            py = PyExploit("exploits/tests/options.py")
            error = ""
            try:
                browser = Browser().create("PhantomJS")
                shellParse = ShellParse({
                    "target": "localhost",
                    "exploits": "exploits/tests/options.py"
                })
                py.start(Pentest().create(browser, shellParse))
            except Exception as e:
                error = str(e)

            self.assertEquals("Exploit parameter(s) missing: wordlist", error)

        def test_options_with_parameters(self):
            browser = Browser().create("PhantomJS")
            shellParse = ShellParse({
                "target": "localhost",
                "exploits": "exploits/tests/options.py",
                "wordlist": "private/wordlist/mylist.txt"
            })
            py = PyExploit("exploits/tests/options.py")
            res = py.hasOptions()
            py.start(Pentest().create(browser, shellParse))
            self.assertTrue(res)

        def test_no_options(self):
            browser = Browser().create("PhantomJS")
            shellParse = ShellParse({
                "target": "localhost",
                "exploits": "exploits/tests/nooptions.py",
            })
            pentest = Pentest().create(browser, shellParse)
            py = PyExploit("exploits/tests/nooptions.py")
            res = py.hasOptions()
            self.assertFalse(res)

        def test_get_options(self):
            py = PyExploit("exploits/tests/options.py")
            exp = ["target","wordlist"]
            res = py.options()
            self.assertEquals(exp, res)


    main()
