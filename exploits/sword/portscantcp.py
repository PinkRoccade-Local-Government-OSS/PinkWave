"""
Performs a TCP scan with NMAP to verify that only expected ports are open
"""
__author__ = "Maarten Schermer"

import sys,os
from os.path import dirname,abspath
import xml.etree.ElementTree as ET
from datetime import datetime

# Importing PinkWave extensions
sys.path.append(dirname(dirname(dirname(abspath(__file__)))))
from extensions.Util import Util,report,payloads

def labels():
    return ['A5 - Security Misconfiguration']

def options():
    return ['target','ports']

def start(pentest):
    import time
    pentest.browser.timeStart = time.time()
    host = Util.getHost(pentest.target)
    reportRoot = Util.getReportDir(pentest.target)
    Util.createDir(reportRoot)
    Util.createDir(reportRoot + "/portscans")
    Util.createDir(reportRoot + "/portscans/tcp")
    Util.createDir(reportRoot + "/portscans/tcp/tmp")

    tmpFile = reportRoot + "/portscans/tcp/tmp/tmp-portscan.xml"
    dstFile = reportRoot + "/portscans/tcp/portscan.csv"

    command = "sudo nmap -sS -oX %s %s" % (tmpFile,host)
    print Util.shell(command)
    pentest.browser.timeEnd = time.time()

    with open(tmpFile) as f:
        content = "".join(f.readlines())
        root = ET.fromstring(content)
        ports = root.findall('.//host/ports/port')
        csvLines = []
        today = datetime.today()
        strtime = today.strftime('%Y-%m-%d %H:%M:%S')
        portnrs = []
        for port in ports:
            portNr = port.get("portid")
    	    state = port.find('.//state')
    	    portState = state.get('state')
    	    if portState == "open":
                portnrs.append(portNr)
                portProtocol = port.get("protocol")
                portState = state.get('state')
                service = port.find('.//service')
                portService = service.get('name')
                csvLine = '"%s","%s","%s","%s","%s"' % (Util.escapeQuotes(strtime),Util.escapeQuotes(portNr),Util.escapeQuotes(portProtocol),Util.escapeQuotes(portState),Util.escapeQuotes(portService))
                csvLines.append(csvLine)

    with open(dstFile,"ab+") as f:
        f.write("\n")
        for line in csvLines:
            f.write(line + "\n")

        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")

    results = set(pentest.ports).symmetric_difference(set(portnrs))
    if len(results) != 0:
        report("Unexpected open/closed ports: " + ", ".join(str(e) for e in results))
