#!/usr/bin/python

"""
Create a Pentest object to start defined exploit(s) and automaticly log found exploits and tests per host.
"""
import time,colors,sys
from os.path import dirname
from Report import Report
from Macro import Macro
from PyExploit import PyExploit
from ShellParse import ShellParse

# Import PinkWave extensions
appDir = dirname(dirname(__file__ ))
sys.path.append(appDir)
from extensions.Util import Util,vdkException

class Pentest:

    def __init__(self):
        self.browser = None

        # Copy from ShellParse
        self.target = None
        self.requestNames = []
        self.request = None
        self.exploits = None
        self.macros = []
        self.creds = []
        self.ports = []
        self.ssl = None
        self.reportId = 0
        self.wordlist = None

    def parameters(self):
        parameters = []

        if self.request != "get":
            parameters.append("--request=%s" % self.request)
        if self.requestNames is not None:
            parameters.append("--requestNames=:%s" % ";".join(self.requestNames))
        if len(self.macros) != 0:
            parameters.append("--macros=%s" % ";".join(self.macros))
        if self.creds is not None:
            parameters.append("--creds=%s" % ";".join(self.creds))
        if self.ports is not None:
            parameters.append("--ports=%s" % ";".join(self.ports))
        if self.ssl != "443":
            parameters.append("--ssl=%s" % self.ssl)
        if self.wordlist is not None:
            parameters.append("--wordlist=%s" % self.wordlist)

        return "-".join(parameters)

    """
    Create a Pentest object with variables
    """
    def create(self, browser, shellParse):
        self.browser = browser
        for key,value in shellParse.propsValue().iteritems():
            setattr(self,key,value)

        if self.request is None:
            self.request = "get"

        if self.target is not None and "http://" not in self.target and "https://" not in self.target:
            self.target = "http://" + self.target

        if self.ssl is not None:
            self.ssl = str(self.ssl)

        return self

    """
    Execute Pentest, save found exploits to csv
    """
    def start(self):
        # Allow execution of single macro
        if len(self.exploits) == 0:
            for m in self.macros:
                ma = Macro().start(m,self.browser)

            if self.target is None:
                return

        Util.createDir(Util.getReportDir(self.target))
        pyExploit = PyExploit(self.exploits)

        for m in self.macros:
            ma = Macro().start(m,self.browser)

        try:
            self.browser.timeStart = time.time()
            pyExploit.start(self)
            self.browser.timeEnd = time.time()
            print "[^] No Exploit detected..."
            r = Report(pyExploit, "OK")
            r.export()
        except vdkException as ex:
            self.browser.timeEnd = time.time()
            if "_potential" in str(type(ex)):
                print "\033[1;91m[?] Potential Exploit detected! (%s)\033[1;m" % pyExploit.exploitPath
            else:
                print "\033[1;91m[!] Exploit detected! (%s)\033[1;m" % pyExploit.exploitPath
            r = Report(pyExploit, ex.message)
            r.export()
            raise
