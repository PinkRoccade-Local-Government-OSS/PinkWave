### For developers/administrators

<h1 align="">Writing your first exploit</h1>

 **Exploits** are python scripts that can be used to perform ***browser*** actions or use any python library for that matter. When ***report(msg)*** is called, the script will terminate and (flagged) log will be generated.

### Directory Structure
- You should create **your own directory** in the exploits folder.
- Create  empty **\_\_init\_\_.py** file in your own directory to allow Python imports.
- (optional) create a **payloads directory** in your exploits folder to store payload files. Payload files (.dat) can be used to store payloads that are used in your scripts.

#### Example Tree
- exploits
- - yourname
- - - firstexploit.py
- - - payloads
- - - - firstexploit.dat

## Requirements for exploit scripts
**Required** in exploit scripts:
- (1) Must import pinkwave extensions/libraries for reporting
- (2) Must have a ***start(pentest)*** function
- (3) Must have a ***options()*** function to define pentest parameters. Must return a **list** of **strings**.
- (4) Must call a **report(msg)** function when detecting a vulnerability.

**Optional** in exploit scripts:
- (5) Should have a ***labels()*** function to define labels for logging. Must return a **list** of **strings**.
- (6) Can have a **dependencies()** function to define external dependencies for exploit. Must return a **dictionary** with the following data: {"name-version":"url"}.

### Example script for testing CSRF (exploits/sword/csrflogin.py)
```
"""
Try to login via a direct POST request to test for CSRF vulnerabilities
"""
__author__ = "sword"

import sys
from os.path import dirname,abspath
sys.path.append(dirname(dirname(dirname(abspath(__file__)))))
from extensions.Util import Util,report,payloads
import extensions.Request as Request

def labels():
    return ['A8 - Cross-Site Request Forgery (CSRF)']

def options():
    return ['target','requestNames','creds']

def start(pentest):
    Request.directpost(pentest.target,pentest.requestNames,pentest.creds)
    for formname in pentest.requestNames:
        if not Request.has_element(formname):
            report("Logged in without CSRF token")

```

#### (1) Import pinkwave extensions
Start by importing the pinkwave extensions.
```
import sys
from os.path import dirname,abspath

# Importing PinkWave extensions
sys.path.append(dirname(dirname(dirname(abspath(__file__)))))
from extensions.Util import Util,report,payloads
import extensions.Request as Request
```

#### (2) Start function
Define a start function with the pentest parameter.
```
def start(pentest):
    pass
```

#### (3) Options function
To test for CSRF we need to login with valid details, for each test I want to ask for the form names(--requestNames) and the credentials (--creds).
```
def options():
    return ['target','requestNames','creds']
```

#### (4) Scanning and reporting
I'm using Request (see [extensions](../docs/extensions)) to make a direct post request to the login page. The variables **target**,**requestNames** and **creds** are passed with the **pentest** variable.

When the browser does not contain the form after logging in, **report()** will be called and the vulnerability will be logged.

```
def start(pentest):
    Request.directpost(pentest.target,pentest.requestNames,pentest.creds)
    for formname in pentest.requestNames:
        if not Request.has_element(formname):
            report("Logged in without CSRF token")
```

#### (5) (optional) Adding labels
I'm adding the OWASP 2013 category for CSRF to each reported log by using the labels() function.
```
def labels():
    ['A8 - Cross-Site Request Forgery (CSRF)']
```

#### (6) (optional) Adding dependencies
This exploit script does not rely on external libraries, function dependencies() will not be used.
