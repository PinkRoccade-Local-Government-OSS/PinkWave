import sys
from os.path import dirname,abspath
sys.path.append(dirname(dirname(abspath(__file__))))

import importlib

from lib.PyExploit import PyExploit
from lib.PyExploit import hasOptions

from lib.Pentest import Pentest
from lib.Browser import Browser
from lib.ShellParse import ShellParse

if __name__ == '__main__':
    from unittest import TestCase
    from unittest import main

    class testPyExploit(TestCase):

        def test_options_without_parameters(self):
            browser = Browser().create("PhantomJS")
            shellParse = ShellParse({
                "target": "localhost",
                "exploits": "exploits/tests/options.py"
            })
            pentest = Pentest().create(browser, shellParse)
            py = PyExploit(pentest, "exploits/tests/options.py")
            mod = importlib.import_module("exploits.tests.options")
            error = ""
            try:
                hasOptions(mod, pentest)
            except Exception as e:
                error = str(e)

            self.assertEquals("PyExploit parameter missing: test", error)

        def test_options_with_toless_parameters(self):
            browser = Browser().create("PhantomJS")
            shellParse = ShellParse({
                "target": "localhost",
                "exploits": "exploits/tests/options.py",
                "test": "test"
            })
            pentest = Pentest().create(browser, shellParse)
            py = PyExploit(pentest, "exploits/tests/options.py")
            mod = importlib.import_module("exploits.tests.options")
            error = ""
            try:
                hasOptions(mod, pentest)
            except Exception as e:
                error = str(e)

            self.assertEquals("PyExploit parameter missing: ssl", error)

        def test_options_with_parameters(self):
            browser = Browser().create("PhantomJS")
            shellParse = ShellParse({
                "target": "localhost",
                "exploits": "exploits/tests/options.py",
                "test": "test",
                "ssl": "23"
            })
            pentest = Pentest().create(browser, shellParse)
            py = PyExploit(pentest, "exploits/tests/options.py")
            mod = importlib.import_module("exploits.tests.options")
            res = hasOptions(mod, pentest)
            self.assertTrue(res)

        def test_no_options(self):
            browser = Browser().create("PhantomJS")
            shellParse = ShellParse({
                "target": "localhost",
                "exploits": "exploits/tests/nooptions.py",
            })
            pentest = Pentest().create(browser, shellParse)
            py = PyExploit(pentest, "exploits/tests/nooptions.py")
            mod = importlib.import_module("exploits.tests.nooptions")
            res = hasOptions(mod, pentest)
            self.assertFalse(res)

    main()
