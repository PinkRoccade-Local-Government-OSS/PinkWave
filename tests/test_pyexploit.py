#!/usr/bin/python
import sys
from os.path import dirname,abspath
sys.path.append(dirname(dirname(abspath(__file__))))

from unittest import TestCase
from unittest import main

from lib.TestParse import TestParse
from lib.Pentest import Pentest
from lib.Browser import Browser
from lib.ShellParse import ShellParse
from lib.PyExploit import PyExploit,PyExploitException
from extensions.Util import Util

class testPyExploit(TestCase):

    def test_options_with_toless_parameters(self):

        py = PyExploit("exploits/tests/options.py")
        error = ""
        try:
            browser = Browser().create("PhantomJS")
            shellParse = ShellParse({
                "target": "localhost",
                "exploits": "exploits/tests/options.py"
            })
            py.start(Pentest().create(browser, shellParse))
        except Exception as e:
            error = str(e)

        self.assertEquals("Exploit parameter(s) missing: wordlist", error)

    def test_options_with_parameters(self):
        browser = Browser().create("PhantomJS")
        shellParse = ShellParse({
            "target": "localhost",
            "exploits": "exploits/tests/options.py",
            "wordlist": "private/wordlist/mylist.txt"
        })
        py = PyExploit("exploits/tests/options.py")
        py.start(Pentest().create(browser, shellParse))
        self.assertTrue(True)

    def test_no_options(self):
        browser = Browser().create("PhantomJS")
        shellParse = ShellParse({
            "target": "localhost",
            "exploits": "exploits/tests/nooptions.py",
        })
        pentest = Pentest().create(browser, shellParse)
        error = False
        try:
            py = PyExploit("exploits/tests/nooptions.py")
        except PyExploitException:
            error = True

        self.assertTrue(error)

    def test_get_options(self):
        py = PyExploit("exploits/tests/options.py")
        exp = ["target","wordlist"]
        res = py.options
        self.assertEquals(exp, res)

    def test_no_options(self):
        browser = Browser().create("PhantomJS")
        shellParse = ShellParse({
            "target": "localhost",
            "exploits": "exploits/tests/depmissing.py",
        })
        pentest = Pentest().create(browser, shellParse)
        error = False
        res = ""
        try:
            py = PyExploit("exploits/tests/depmissing.py")
        except PyExploitException as e:
            res = str(e)
            error = True

        self.assertTrue(error)
        exp = "External dependency %s missing, download here: %s and place it in %s" % ('fake-pentest-plugin','http://fake-pentest-plugin.fake',Util.getAppDir()+'/pw_modules/fake-pentest-plugin')
        self.assertEquals(exp,res)

if __name__ == '__main__':
    main()
