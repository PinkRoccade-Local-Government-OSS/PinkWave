### For developers/administrators

<h1 align="">Writing your first exploit</h1>

 **Exploits** are python scripts that can be used to perform ***browser*** actions or use any other python library for that matter. When ***report(msg)*** is called, the script will terminate and an incident will be reported of a vulnerability.

An exploit script must have:
- Must have a ***start(pentest)*** function
- Must have a ***options*** function (specify pentest parameters)

An exploit script should have:
- Should have a ***cats()*** function to define category for logging (I use it to specify OWASP categories)
- Should include append root to paths:
```
sys.path.append(dirname(dirname(dirname(abspath(__file__)))))
```
- Should import pinkwave extensions/libraries


## Directory Structure
You should create **your own directory** in the exploits folder. Also create a **payloads directory** in your exploits folder to store payload files. Payload files (.dat) are used to loop through each line in your script.
- .
- ..
- exploits
- - sword
- - test
- - yourname
- - - firstexploit.py
- - - payloads



## Example (CSRF)

```
"""
Try to login via a direct POST request to test for CSRF vulnerabilities
"""
__author__ = "Maarten Schermer"

import sys
from os.path import dirname,abspath

# Importing PinkWave extensions
sys.path.append(dirname(dirname(dirname(abspath(__file__)))))
from extensions.Util import Util,report,payloads
from extensions.Request import Request
from lib.Browser import NoSuchElementException

def cats():
    return ['A8 - Cross-Site Request Forgery (CSRF)']

def options():
    return ['target','requestNames','creds']

def start(pentest):
    Request(pentest.browser).directpost(pentest.target,pentest.requestNames,pentest.creds)
    for formname in pentest.requestNames:
        try:
            pentest.browser.getElementByName(formname)
        except NoSuchElementException:
            report("Logged In with direct POST")
```

